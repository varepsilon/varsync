#summary Varsync wiki (main page).
#labels Featured
_Welcome to the varsync wiki!_
<wiki:toc max_depth="3" />

Work is in progress now. Currently you can play with these options:
  * _--random_ *client and server* option
  * _--random2_ *client and server* option
  * _--small-blength_ *server* option
  * _--cyclic_ *client and server* option

= Statistics =
Stats can be viewed [http://code.google.com/p/varsync/wiki/stats here].
= Study of false alarms and bit-strength =
Graphics can be viewed [http://www.editgrid.com/user/varepsilon/false-alarms on EditGrid]
= Profiling =
Profiling results can be viewed [http://code.google.com/p/varsync/wiki/profiling here].
= Different implementations: =
== Random implementation ==
Random implementation comprises this ideas:
  # Random-based weak checksum (*--random* option).
  # Random-based strong checksum (*--random2* option).
  # Smaller block size (*--small-blength* option) for better speedup.
First idea aims to give easy-to-calculate *weak checksum* with the same rolling property (see [http://rsync.samba.org/tech_report/node3.html original implementation]) based on random-generated numbers. More information about the idea can be found [http://code.google.com/p/varsync/wiki/idea here].

Second idea is about security despite it's being easy-to-calculate also. It uses the same technique as first idea but is more stronger. Opposite to the original md4/md5-based technique it doesn't rely on the strength of any sum: it is random =) But we do not completely rely on the randomness: we leave the file md5 checksum. So even if the gods will dislike us md5 can still help us!

== Cyclic implementation ==
The idea is that a hash value is a polynomial in a ring GF(2)`[`x`]`/(x^m + 1), which is obtained from the word by treating it as a polynomial coefficients and performing factorization procedure.

More details coming soon...

For exhaustive study of this (and some another) idea see article of Jonathan D.Cohen "Recursive Hashing Functions for n-Grams".